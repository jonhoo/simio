#
# Luby's Maximal Independent Set algorithm for asynchronous nodes
# http://books.google.com/books?id=G7SZ32dPuLgC&lpg=PA170&ots=fL4yuWJB5j&dq=luby%20maximal%20independent%20set%20asynchronous&pg=PA170#v=onepage&q&f=false
#

Name:
	LubyMIS

Signature-Input:
	rrandom(m)
	rselected(m)
	reliminated(m)

Signature-Output:
	random(m) connect rrandom
	selected(m) connect rselected
	eliminated(m) connect reliminated

State:
	import random
	self.neighbourset = self.nbrs
	self.rand = random.random()
	self.selected = False
	self.eliminated = False
	self.sendq = [('random', n, self.rand) for n in self.nbrs]

	self.rrand = []
	self.rsel = []
	self.relim = []

# Senders
Transition-Name:
	random(m)
Transition-Precondition:
	return len(self.sendq) > 0 and self.sendq[0][0] is 'random' and self.sendq[0][1] is to
Transition-Output:
	return self.sendq[0][2]
Transition-Effect:
	self.sendq.pop(0)

Transition-Name:
	selected(m)
Transition-Precondition:
	return len(self.sendq) > 0 and self.sendq[0][0] is 'selected' and self.sendq[0][1] is to
Transition-Output:
	return self.sendq[0][2]
Transition-Effect:
	self.sendq.pop(0)

Transition-Name:
	eliminated(m)
Transition-Precondition:
	return len(self.sendq) > 0 and self.sendq[0][0] is 'eliminated' and self.sendq[0][1] is to
Transition-Output:
	return self.sendq[0][2]
Transition-Effect:
	self.sendq.pop(0)

Transition-Name:
	rrandom(m)
Transition-Effect:
	self.rrand.append(m)
	if len(self.rrand) == len(self.neighbourset):
		lt = True
		for r in self.rrand:
			lt = lt and self.rand < r
		self.rrand = []
		if lt:
			for j in self.neighbourset:
				self.sendq.append(('selected', j, True))
			self.selected = True
			mark("green")
		else:
			self.rsel = []
			for j in self.neighbourset:
				self.sendq.append(('selected', j, False))

Transition-Name:
	rselected(m)
Transition-Effect:
	self.rsel.append((fr, m))
	if len(self.rsel) == len(self.neighbourset):
		t = [m for m in self.rsel if m[1]]
		f = [m for m in self.rsel if not m[1]]
		if len(t) > 0:
			for j in f:
				self.sendq.append(('eliminated', j, True))
			self.eliminated = True
			mark("red")
		else:
			self.relim = []
			for j in f:
				self.sendq.append(('eliminated', j, False))

Transition-Name:
	reliminated(m)
Transition-Effect:
	self.relim.append((fr, m))
	if len(self.relim) == len(self.neighbourset):
		for j in self.neighbourset:
			if (j, True) in relim:
				self.neighbourset.remove(j)
		if len(self.neighbourset) == 0:
			self.selected = True
			mark("green")
		else:
			self.sendq.extend([('random', j, self.rand) for j in self.neighbourset])

Tasks:
	random(m)
	selected(m)
	eliminated(m)
